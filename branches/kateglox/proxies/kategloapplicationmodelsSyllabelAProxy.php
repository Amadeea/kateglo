<?php
namespace kateglo\proxies {
    /**
     * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
     */
    class kategloapplicationmodelsSyllabelAProxy extends \kateglo\application\models\Syllabel implements \Doctrine\ORM\Proxy\Proxy {
        private $_em;
        private $_assoc;
        private $_owner;
        private $_joinColumnValues;
        private $_loaded = false;
        public function __construct($em, $assoc, $owner, array $joinColumnValues) {
            $this->_em = $em;
            $this->_assoc = $assoc;
            $this->_owner = $owner;
            $this->_joinColumnValues = $joinColumnValues;
            
        }
        private function _load() {
            if ( ! $this->_loaded) {
                $this->_assoc->load($this->_owner, $this, $this->_em, $this->_joinColumnValues);
                unset($this->_em);
                unset($this->_owner);
                unset($this->_assoc);
                unset($this->_joinColumnValues);
                $this->_loaded = true;
                $exports = get_object_vars($this);
				$this->id= $exports['id'];
				$this->lemma= $exports['lemma'];
				$this->syllabel= $exports['syllabel'];
                
            }
        }
        public function __isInitialized__() { return $this->_loaded; }

        
        public function setLemma(\kateglo\application\models\Lemma $lemma) {
            $this->_load();
            return parent::setLemma($lemma);
        }

        public function getLemma() {
            $this->_load();
            return parent::getLemma();
        }

        public function setSyllabel($syllabel) {
            $this->_load();
            return parent::setSyllabel($syllabel);
        }

        public function getSyllabel() {
            $this->_load();
            return parent::getSyllabel();
        }


        public function __sleep() {
            if (!$this->_loaded) {
                throw new \RuntimeException("Not fully loaded proxy can not be serialized.");
            }
            return array('id', 'lemma', 'syllabel');
        }
        
    }
}